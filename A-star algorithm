import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Distance from start node
        self.h = 0  # Heuristic distance to end node
        self.f = 0  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def heuristic(node, goal):
    # Using Manhattan distance as heuristic
    return abs(node.position[0] - goal.position[0]) + abs(node.position[1] - goal.position[1])

def astar(grid, start, end):
    start_node = Node(start)
    end_node = Node(end)
    
    open_list = []
    closed_list = set()
    
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)
        
        if current_node.position == end_node.position:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path
        
        neighbors = [
            (0, -1), (0, 1), (-1, 0), (1, 0),  # Adjacent squares (up, down, left, right)
        ]
        
        for new_position in neighbors:
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])
            
            if node_position[0] < 0 or node_position[0] >= len(grid) or node_position[1] < 0 or node_position[1] >= len(grid[0]):
                continue
            
            if grid[node_position[0]][node_position[1]] != 0:
                continue
            
            if node_position in closed_list:
                continue
            
            neighbor = Node(node_position, current_node)
            
            neighbor.g = current_node.g + 1
            neighbor.h = heuristic(neighbor, end_node)
            neighbor.f = neighbor.g + neighbor.h
            
            if add_to_open(open_list, neighbor):
                heapq.heappush(open_list, neighbor)
    
    return None  # No path found

def add_to_open(open_list, neighbor):
    for node in open_list:
        if neighbor.position == node.position and neighbor.g > node.g:
            return False
    return True

# Example usage
if __name__ == "__main__":
    # 0 = walkable cell, 1 = obstacle
    grid = [
        [0, 1, 0, 0, 0],
        [0, 1, 0, 1, 0],
        [0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0]
    ]
    
    start = (0, 0)  # Starting position
    end = (4, 4)    # Goal position
    
    path = astar(grid, start, end)
    
    if path:
        print("Path found:", path)
    else:
        print("No path found")
